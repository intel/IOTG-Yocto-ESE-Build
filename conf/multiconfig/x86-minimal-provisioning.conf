# storage provisioning utility image
require ./x86-minimal.conf

# extra tools for provisioning support for core-image-full-cmdline
IMAGE_INSTALL_append = " util-linux-fdisk gptfdisk nfs-utils iscsi-initiator-utils bmap-tools rsync"
IMAGE_INSTALL_append = " dosfstools e2fsprogs"

# signed kernel support
require ./signing.inc
KERNEL_CLASSES_append = " kernel-sign kernel-sblimage"

# inject initrd image from core-image-full-cmdline (hddimg)
# see image-live.bbclass INITRD_IMAGE_LIVE or whatever image class in use embed the initramfs
# we use multiconfig to get around circular dependencies
KERNEL_CLASSES_append = " kernel-initrd"
INITRAMFS_IMAGE_NAME = "core-image-minimal-initramfs"
INITRAMFS_IMAGE_RECIPE = "mc:${BB_CURRENT_MC}:x86-musl:${INITRAMFS_IMAGE_NAME}"
INITRAMFS_IMAGE_PATH = "${TOPDIR}/tmp-x86-musl-musl/deploy/images/${MACHINE}/${INITRAMFS_IMAGE_NAME}-${MACHINE}.cpio"

# put signed and slim boot container
IMGCLASSES_append = " image-live-injector"
IMAGE_LIVE_INJECTOR_KERNEL = "${DEPLOY_DIR_IMAGE}/${KERNEL_IMAGETYPE}-kernel.signed"
IMAGE_LIVE_INJECTOR_SBL = "${DEPLOY_DIR_IMAGE}/sbl_os"
IMAGE_LIVE_INJECTOR_OTHERS = "${DEPLOY_DIR_IMAGE}/sbl_os_2k.bin ${DEPLOY_DIR_IMAGE}/sbl_os_3k.bin"

# we have already injected the initramfs into the kernel, a separate build is not needed
MACHINE_FEATURES_remove = "intel-ucode"
INITRD_IMAGE_LIVE = ""
INITRD_LIVE = ""
INITRD = ""

# read-only FS to allow squashfs compressed image for size management
IMAGE_FEATURES = "read-only-rootfs"
LIVE_ROOTFS_TYPE = "squashfs-lz4"
# simple hddimg only for now
IMAGE_FSTYPES = "hddimg"
IMAGE_FSTYPES_remove = "wic"

# support only live booting, no install
LABELS_LIVE = "boot"

# shim wrapper around systemd-boot, should work for grub-efi too
# copies shim and wrapped EFI_BOOT_IMAGE
EFI_PROVIDER = "shim"
SHIM_LOADER_SUFFIX = "x64"
# systemd-boot
SHIM_LOADER_PROVIDER = "systemd-boot"
SHIM_LOADER_IMAGE = "systemd-boot${SHIM_LOADER_SUFFIX}.efi"
# grub-efi
#SHIM_LOADER_PROVIDER = "grub-efi"
#SHIM_LOADER_IMAGE = "grub${SHIM_LOADER_SUFFIX}.efi"
