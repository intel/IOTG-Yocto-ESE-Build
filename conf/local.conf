#
# This file is your local configuration file and is where all local user settings
# are placed. The comments in this file give some guide to the options a new user
# to the system might want to change but pretty much any configuration option can
# be set in this file. More adventurous users can look at local.conf.extended
# which contains other examples of configuration which can be placed in this file
# but new users likely won't need any of them initially.
#
# Lines starting with the '#' character are commented out and in some cases the
# default values are provided as comments to show people example syntax. Enabling
# the option is a question of removing the # character and making any change to the
# variable as required.

# Machine Selection
MACHINE ??= "intel-corei7-64"
BBMULTICONFIG = "x86 musl"

# Take note that as we are building 3rd party ingredient.
# We need the LICENSE_FLAGS below.
LICENSE_FLAGS_WHITELIST += "commercial"

# Kernel revision is set based on engineering releases.
# To build with latest product kernel from OTC,
# uncomment the 3 lines below and update LINUX_VERSION.
#SRC_URI_intel-corei7-64_pn-linux-intel-dev = "git://git-amr-4.devtools.intel.com/kernel-bkc.git;nobranch=1;name=machine"
#SRCREV_machine_intel-corei7-64_pn-linux-intel-dev = "dev-bkc-2017w04.1-082218"
#LINUX_VERSION_intel-corei7-64_pn-linux-intel-dev = "4.10-rc5"

# Multi-lib support is turned off by default
# To enable support, uncomment the below 4 lines
# and add 32-bit libraries with IMAGE_INSTALL
#require conf/multilib.conf
#DEFAULTTUNE = "corei7-64"
#MULTILIBS = "multilib:lib32"
#DEFAULTTUNE_virtclass-multilib-lib32 = "corei7-32"

# Use /lib64 even if not multilib
require conf/multilib.conf
MULTILIBS = ""

# Security package
IMAGE_INSTALL_append = " libseccomp apparmor jhi"

# Apparmor & seccomp support
APPEND += "apparmor=1 security=apparmor mem_sleep_default=deep"
DEPENDS_append_pn-systemd = " apparmor"
PACKAGECONFIG_append_pn-systemd = " gnutls seccomp lz4"
PACKAGECONFIG_append_pn-gnutls = " seccomp"
BBCLASSEXTEND_pn-libseccomp = "native nativesdk"

# Network package
IMAGE_INSTALL_append = " mosquitto"

PREFERRED_VERSION_systemd-bootchart = "233%"

# Runtime environment export setting for x11
IMAGE_INSTALL_append = " xserver-nodm-config"

# To add support for signed image installation to non-removable media,
# user needs the parted tool and custom scripts
#IMAGE_INSTALL_append = " parted secboot-script"
# To boot up signed image from boot medium with boot and rootfs located
# at different partitions, DISK_SIGNATURE_UUID is required.
#DISK_SIGNATURE_UUID = "f1f27ee1-1898-496e-bcb8-18188fc08072"
DISK_SIGNATURE_UUID = ""

# Where to place downloads
#
# During a first build the system will download many different source code tarballs
# from various upstream projects. This can take a while, particularly if your network
# connection is slow. These are all stored in DL_DIR. When wiping and rebuilding you
# can preserve this directory to speed up this part of subsequent builds. This directory
# is safe to share between multiple builds on the same machine too.
#
# The default is a downloads directory under TOPDIR which is the build directory.
#
#DL_DIR ?= "${TOPDIR}/downloads"

#
# Where to place shared-state files
#
# BitBake has the capability to accelerate builds based on previously built output.
# This is done using "shared state" files which can be thought of as cache objects
# and this option determines where those files are placed.
#
# You can wipe out TMPDIR leaving this directory intact and the build would regenerate
# from these files if no changes were made to the configuration. If changes were made
# to the configuration, only shared state files where the state was still valid would
# be used (done using checksums).
#
# The default is a sstate-cache directory under TOPDIR.
#
#SSTATE_DIR ?= "${TOPDIR}/sstate-cache"

#
# Where to place the build output
#
# This option specifies where the bulk of the building work should be done and
# where BitBake should place its temporary files and output. Keep in mind that
# this includes the extraction and compilation of many applications and the toolchain
# which can use Gigabytes of hard disk space.
#
# The default is a tmp directory under TOPDIR.
#
#TMPDIR = "${TOPDIR}/tmp"

#
# Default policy config
#
# The distribution setting controls which policy settings are used as defaults.
# The default value is fine for general Yocto project use, at least initially.
# Ultimately when creating custom policy, people will likely end up subclassing
# these defaults.
# For further details on ardia distro, see meta-ardia/README.
DISTRO ?= "intel-embedded-system-enabling"

#
# Package Management configuration
#
# This variable lists which packaging formats to enable. Multiple package backends
# can be enabled at once and the first item listed in the variable will be used
# to generate the root filesystems.
# Options are:
#  - 'package_deb' for debian style deb files
#  - 'package_ipk' for ipk files are used by opkg (a debian style embedded package manager)
#  - 'package_rpm' for rpm style packages
# E.g.: PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"
# We default to rpm:
PACKAGE_CLASSES ?= "package_rpm"

#
# SDK target architecture
#
# This variable specifies the architecture to build SDK items for and means
# you can build the SDK packages for architectures other than the machine you are
# running the build on (i.e. building i686 packages on an x86_64 host).
# Supported values are i686 and x86_64
SDKMACHINE ?= "x86_64"

#
# Extra image configuration defaults
#
# The EXTRA_IMAGE_FEATURES variable allows extra packages to be added to the generated
# images. Some of these options are added to certain image types automatically. The
# variable can contain the following options:
#  "dbg-pkgs"       - add -dbg packages for all installed packages
#                     (adds symbol information for debugging/profiling)
#  "dev-pkgs"       - add -dev packages for all installed packages
#                     (useful if you want to develop against libs in the image)
#  "ptest-pkgs"     - add -ptest packages for all ptest-enabled packages
#                     (useful if you want to run the package test suites)
#  "tools-sdk"      - add development tools (gcc, make, pkgconfig etc.)
#  "tools-debug"    - add debugging tools (gdb, strace)
#  "eclipse-debug"  - add Eclipse remote debugging support
#  "tools-profile"  - add profiling tools (oprofile, lttng, valgrind)
#  "tools-testapps" - add useful testing tools (ts_print, aplay, arecord etc.)
#  "debug-tweaks"   - make an image suitable for development
#                     e.g. ssh root access has a blank password
# There are other application targets that can be used here too, see
# meta/classes/image.bbclass and meta/classes/core-image.bbclass for more details.
# We default to enabling the debugging tweaks.
# EXTRA_IMAGE_FEATURES ?= "debug-tweaks"

#
# Additional image features
#
# The following is a list of additional classes to use when building images which
# enable extra features. Some available options which can be included in this variable
# are:
#   - 'buildstats' collect build statistics
#   - 'image-mklibs' to reduce shared library files size for an image
#   - 'image-prelink' in order to prelink the filesystem image
#   - 'image-swab' to perform host system intrusion detection
# NOTE: if listing mklibs & prelink both, then make sure mklibs is before prelink
# NOTE: mklibs also needs to be explicitly enabled for a given image, see local.conf.extended
# image-prelink disabled for now due to issues with IFUNC symbol relocation
USER_CLASSES ?= "buildstats image-mklibs"

#
# Runtime testing of images
#
# The build system can test booting virtual machine images under qemu (an emulator)
# after any root filesystems are created and run tests against those images. To
# enable this uncomment this line. See classes/testimage(-auto).bbclass for
# further details.
#TEST_IMAGE = "1"
#
# Interactive shell configuration
#
# Under certain circumstances the system may need input from you and to do this it
# can launch an interactive shell. It needs to do this since the build is
# multithreaded and needs to be able to handle the case where more than one parallel
# process may require the user's attention. The default is iterate over the available
# terminal types to find one that works.
#
# Examples of the occasions this may happen are when resolving patches which cannot
# be applied, to use the devshell or the kernel menuconfig
#
# Supported values are auto, gnome, xfce, rxvt, screen, konsole (KDE 3.x only), none
# Note: currently, Konsole support only works for KDE 3.x due to the way
# newer Konsole versions behave
#OE_TERMINAL = "auto"
# By default disable interactive patch resolution (tasks will just fail instead):
PATCHRESOLVE = "noop"

#
# Disk Space Monitoring during the build
#
# Monitor the disk space during the build. If there is less that 1GB of space or less
# than 100K inodes in any key build location (TMPDIR, DL_DIR, SSTATE_DIR), gracefully
# shutdown the build. If there is less that 100MB or 1K inodes, perform a hard abort
# of the build. The reason for this is that running completely out of space can corrupt
# files and damages the build in ways which may not be easily recoverable.
# It's necesary to monitor /tmp, if there is no space left the build will fail
# with very exotic errors.
BB_DISKMON_DIRS = "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"

#
# Shared-state files from other locations
#
# As mentioned above, shared state files are prebuilt cache data objects which can
# used to accelerate build time. This variable can be used to configure the system
# to search other mirror locations for these objects before it builds the data itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp. These
# would contain the sstate-cache results from previous builds (possibly from other
# machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
# cache locations to check for the shared objects.
# NOTE: if the mirror uses the same structure as SSTATE_DIR, you need to add PATH
# at the end as shown in the examples below. This will be substituted with the
# correct path within the directory structure.
#SSTATE_MIRRORS ?= "\
#file://.* http://172.30.109.231/glenview/sstate/PATH;downloadfilename=PATH"
#file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \n \
#file://.* file:///some/local/dir/sstate/PATH"


#
# Qemu configuration
#
# By default qemu will build with a builtin VNC server where graphical output can be
# seen. The two lines below enable the SDL backend too. By default libsdl-native will
# be built, if you want to use your host's libSDL instead of the minimal libsdl built
# by libsdl-native then uncomment the ASSUME_PROVIDED line below.
#PACKAGECONFIG_append_pn-qemu-native = " sdl"
#PACKAGECONFIG_append_pn-nativesdk-qemu = " sdl"
#ASSUME_PROVIDED += "libsdl-native"

# CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
# track the version of this file when it was generated. This can safely be ignored if
# this doesn't mean anything to you.
CONF_VERSION = "1"

BBFILE_PRIORITY_ivi = "1"
BBMASK = "meta-ivi/.*bbappend|meta-ivi/recipes-extended/.*|meta-ivi/recipes-multimedia/.*"

IMAGE_OVERHEAD_FACTOR = "1.0"
IMAGE_FSTYPES = "wic wic.bmap"
INITRAMFS_FSTYPES = "cpio"
WKS_ROOT_SIZE_MB ??= "8192"
WKS_DATA_SIZE_MB ??= "8192"
WKS_BOOT_SIZE_MB ??= "128"
WKS_SWAP_SIZE_MB ??= "1024"
WKS_ROOT_FS = "ext4"
WKS_ROOT_TYPE ?= "EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"
WKS_ROOT_TYPE_x86 = "44479540-F297-41B2-9AF7-D131D5F0458A"
WKS_ROOT_TYPE_x86-64 = "4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709"
WKS_ROOT_TYPE_arm = "69DAD710-2CE4-4E3C-B16C-21A1D49ABED3"
WKS_ROOT_TYPE_aarch64 = "B921B045-1DF0-41C3-AF44-4C6F280D3FAE"
WKS_FILE = "mender-io.wks.in"
WKS_FILE_DEPENDS += "sb-keymgmt-native grub-efi grub-efi-native cpio-native"

BSP_SUBTYPE = "x86"

MACHINE_FEATURES_remove = "pcbios"

DISTRO_FEATURES_append = " x11 wayland vulkan"
CORE_IMAGE_EXTRA_INSTALL += "wayland weston"
DISTRO_FEATURES_NATIVE_append = " x11"
DISTRO_FEATURES_NATIVESDK_append = " x11"

# Set preferred version for media
PREFERRED_VERSION_gstreamer1.0 = "1.17%"
PREFERRED_VERSION_gstreamer1.0-plugins-base = "${PREFERRED_VERSION_gstreamer1.0}"
PREFERRED_VERSION_gstreamer1.0-plugins-bad = "${PREFERRED_VERSION_gstreamer1.0}"
PREFERRED_VERSION_gstreamer1.0-plugins-good = "${PREFERRED_VERSION_gstreamer1.0}"
PREFERRED_VERSION_gstreamer1.0-vaapi = "${PREFERRED_VERSION_gstreamer1.0}"
IMAGE_INSTALL_append = " gstreamer1.0-libav"
PREFERRED_VERSION_intel-media-driver = "19.3"
PREFERRED_VERSION_gmmlib = "19.3.2"
PREFERRED_VERSION_gmmlib-native = "${PREFERRED_VERSION_gmmlib}"
PREFERRED_VERSION_msdk = "19.3"
DISTRO_FEATURES_append = " msdk"
IMAGE_INSTALL_append = " intel-media-driver"
IMAGE_INSTALL_append = "${@bb.utils.contains("DISTRO_FEATURES","msdk", " msdk", "", d)}"

# mesa iris driver
PACKAGECONFIG_append_pn-mesa = " gallium"

# Add fwupdate packages
IMAGE_INSTALL_append = " fwupdate fwupdate-boot"

# Remove ltp to reduce image size
PACKAGE_EXCLUDE = "ltp"
RDEPENDS_packagegroup-core-tools-testapps_remove = " ltp"

# Required additional host tools
HOSTTOOLS += "git-lfs"

# Enable ocl-icd and neo for elkhart-lake
IMAGE_INSTALL_append = " ocl-icd intel-compute-runtime"

# Enable ptp daemons
IMAGE_INSTALL_append = " gptp linuxptp net-snmp"

# Enable cups
IMAGE_INSTALL_append = " cups"

# Enable freeglut for elkhart-lake
IMAGE_INSTALL_append = " freeglut"

# Remove unneeded applciations
PACKAGECONFIG_remove_pn-alsa-tools = "echomixer envy24control rmedigicontrol"
PACKAGECONFIG_remove_pn-gstreamer1.0-plugins-good = "speex"
GSTEXAMPLES = ""
RDEPENDS_packagegroup-meta-oe-multimedia_remove = "yavta"
RDEPENDS_packagegroup-core-x11-utils_remove = "xinput-calibrator"
RDEPENDS_packagegroup-base-ext2_remove = "hdparm"
RDEPENDS_packagegroup-core-full-cmdline-extended_remove = "iputils"
RDEPENDS_packagegroup-core-x11-sato-base_remove = "matchbox-config-gtk settings-daemon"
RDEPENDS_packagegroup-core-x11-sato-apps_remove = "l3afpad"
RDEPENDS_packagegroup-base-serial_remove = "lrzsz"
RDEPENDS_packagegroup-core-tools-testapps_remove = "blktool lrzsz"
RDEPENDS_packagegroup-self-hosted-extended_remove = "lrzsz settings-daemon"
DEPENDS_remove_pn-perf = "libnewt"
MACHINE_FEATURES_remove_pn-matchbox-panel-2 = "acpi"
PACKAGECONFIG_remove_pn-iproute2 = "tipc"
PACKAGECONFIG_remove = "tcp-wrappers"
EXTRA_OECONF_remove_pn-matchbox-panel-2 = "--enable-startup-notification"
EXTRA_OECONF_append_pn-matchbox-panel-2 = " --disable-startup-notification"
DEPENDS_remove_pn-matchbox-panel-2 = "startup-notification"
EXTRA_OECONF_remove_pn-matchbox-desktop = "--enable-startup-notification"
EXTRA_OECONF_append_pn-matchbox-desktop = " --disable-startup-notification"
DEPENDS_remove_pn-matchbox-desktop = "startup-notification"
DEPENDS_remove_pn-matchbox-wm = "startup-notification"
EXTRA_OECONF_remove_pn-matchbox-wm = "--enable-startup-notification"
EXTRA_OECONF_append_pn-matchbox-wm = " --disable-startup-notification"
NETWORK_MANAGER = "connman"
FILEMANAGER = ""
PTEST_ENABLED_pn-util-linux = ""
PACKAGECONFIG_remove_pn-vim = "gtkgui"
BAD_RECOMMENDATIONS_append = " rng-tools"
RRECOMMENDS_openssh-sshd_remove = "rng-tools"

#################
# ESE PACKAGES
#################

# ESE specific packagegroups
IMAGE_INSTALL_append = " packagegroup-ese-coretools"
IMAGE_INSTALL_append = " packagegroup-ese-graphics"
IMAGE_INSTALL_append = " packagegroup-ese-graphics-2d"
IMAGE_INSTALL_append = " packagegroup-ese-graphics-display"
IMAGE_INSTALL_append = " packagegroup-ese-graphics-media"
IMAGE_INSTALL_append = " packagegroup-ese-graphics-tools"
IMAGE_INSTALL_append = " packagegroup-ese-multimedia"
IMAGE_INSTALL_append = " packagegroup-ese-wireless"
IMAGE_INSTALL_append = " packagegroup-core-x11-extended"

# Weston/Wayland
IMAGE_INSTALL_append = " wayland weston"

# Contents from meta-tpm2 of meta-secure-core
IMAGE_INSTALL_append = " packagegroup-ese-tpm2"

# Add multimedia components
DISTRO_FEATURES_append = " pulseaudio"

# linux-firmware
IMAGE_INSTALL_append = " linux-firmware"

# Add wifi/bluetooth components, uncomment the following line to use out of tree iwlwifi and disable the kernel wifi drivers
DISTRO_FEATURES_append = " backport-iwlwifi"
IMAGE_INSTALL_append = "${@bb.utils.contains("DISTRO_FEATURES","backport-iwlwifi", " backport-iwlwifi", "", d)}"
IMAGE_INSTALL_append = "${@bb.utils.contains("DISTRO_FEATURES","wifi", " crda", "", d)}"

# Enable TPM drivers
MACHINE_FEATURES_append = " tpm"

# Enable LMS
IMAGE_INSTALL_append = " lms"

# Logging support
IMAGE_INSTALL_append = " logrotate"

# Remove unnecessary packages installed in sato image
IMAGE_INSTALL_remove = " packagegroup-core-x11-sato-games kernel-devsrc"

# Remove unnecessary image features added in sato-sdk image
IMAGE_FEATURES_remove = "eclipse-debug tools-profile"

# X11-related
IMAGE_INSTALL_append = " xinput"

# Production-type image optional
#INHERIT += "extrausers"
#EXTRA_USERS_PARAMS = "${@bb.utils.contains("IMAGE_FEATURES","allow-empty-password", "", "usermod -P 1876*18 root;", d)}"

# prefer bleeding edge iproute2
PREFERRED_VERSION_iproute2 = "git%"

# additional Intel i915 fw
IMAGE_INSTALL_append = " i915-additional-fw"

#################
# ESE PACKAGES
#################



# use openssh instead of dropbear
IMAGE_FEATURES_remove = "ssh-server-dropbear"
IMAGE_FEATURES_append = " ssh-server-openssh"

# TPM TOOLS from latest and greatest
PREFERRED_VERSION_tpm2-tools = "git%"

# Workaround for the bug to generate nativesdk
TOOLCHAIN_HOST_TASK_append = " nativesdk-cmake-dev"

# Workaround kernel 4.20 no longer having oldnoconfig
KERNEL_CONFIG_COMMAND = "oe_runmake_call -C ${S} O=${B} olddefconfig"

#skip apparmor ptest
PTEST_ENABLED_pn-apparmor = ""
SYSTEMD_AUTO_ENABLE_pn-apparmor = "enable"

# Enable secureboot for elkhart-lake
SECURITY_NO_FORTIFY_CFLAGS = "-fstack-protector-strong -pie -fpie -Wformat -Wformat-security"
SECUREBOOT = "true"

# Grub-efi provider
EFI_PROVIDER = "grub-efi"

# Secureboot cert and key path
DB_KEY_PATH = "${TOPDIR}/cert/DB.key"
DB_CERT_PATH = "${TOPDIR}/cert/DB.crt"
# Optional key to be placed in mokmanager, used to sign grub and kernel, will be autogenerated if unset
MOK_KEY_PATH = "${TOPDIR}/cert/yocto.key"
MOK_CERT_PATH = "${TOPDIR}/cert/yocto.crt"
# Optional key used by shim to sign/verify mokmanager, will be autogenerated if unset
SHIM_KEY_PATH = "${TOPDIR}/cert/shim.key"
SHIM_CERT_PATH = "${TOPDIR}/cert/shim.crt"

# default kernel (virtual provider set in multiconfig with internal overrides)
IMAGE_INSTALL_append = " kernel-image-signed kernel-modules"

# Not actually needed, handled elsewhere through wic plugins
MACHINE_ESSENTIAL_EXTRA_RDEPENDS_remove = "kernel-image"
BAD_RECOMMENDATIONS_append = " grub-efi-bootimg virtual/grub-bootconf"
RDEPENDS_grub-efi_remove_class-target = "virtual/grub-bootconf"

# autoload modules
KERNEL_MODULE_AUTOLOAD_append = " configfs"

# use consolekit2
PREFERRED_RPROVIDER_consolekit = "consolekit2"

# Mender settings
MENDER_FEATURES_DISABLE_append = " mender-image-uefi mender-systemd"
INHERIT += "mender-full"
# MENDER_ARTIFACT_NAME needs to be defined globally
MENDER_ARTIFACT_NAME = "Release-${DATETIME}"
MENDER_ARTIFACT_NAME[vardepsexclude] = "DATETIME"
MENDER_IMAGE_ROOTFS_MAXSIZE_DEFAULT = ""
MENDER_STORAGE_TOTAL_SIZE_MB = "32768"
IMAGE_ROOTFS_SIZE = "${@int(round(${WKS_ROOT_SIZE_MB} * 1024 - (${IMAGE_ROOTFS_EXTRA_SPACE})))}"
IMAGE_ROOTFS_MAXSIZE = "${@int(round(${WKS_ROOT_SIZE_MB} * 1024))}"
ROOTFS_POSTPROCESS_COMMAND_remove = "mender_update_fstab_file;"
MENDER_BOOT_PART_MOUNT_LOCATION = "/boot/efi"
SYSTEMD_AUTO_ENABLE_pn-mender = "disable"
PREFERRED_VERSION_mender-artifact = "2.4%"
PREFERRED_VERSION_mender-artifact-native = "${PREFERRED_VERSION_mender-artifact}"
ARTIFACTIMG_FSTYPE = "${WKS_ROOT_FS}"
IMAGE_ROOTFS_EXCLUDE_PATH_append = " etc/"
# Mender relabeling post-update script
IMAGE_INSTALL_append = " mender-relabel mender-reconf"
# Mender helper init
INITRAMFS_IMAGE = "mender-initramfs"
INITRAMFS_IMAGE_RECIPE = "multiconfig:x86:musl:${INITRAMFS_IMAGE}"
INITRAMFS_MAXSIZE = "${@int(round(8 * 1024 * 1024))}"
INITRAMFS_IMAGE_PATH = "${TOPDIR}/tmp-musl/deploy/images/${MACHINE}/${INITRAMFS_IMAGE}-${MACHINE}.cpio"
# Mender boot hints
APPEND += "mender.efi=PARTLABEL=efi mender.primary=PARTLABEL=primary mender.secondary=PARTLABEL=secondary mender.data=PARTLABEL=data mender.swap=PARTLABEL=swap"

# Additional serial consoles
SERIAL_CONSOLES_append = " 115200;ttyS4 115200;ttyS5"
APPEND_append = " console=ttyS4,115200n8 console=ttyS5,115200n8"

# OS-release info
IMAGE_INSTALL_append = " os-release"

# IASImage settings for Slimboot
IAS_KEY_PATH = "${TOPDIR}/cert/TestSigningPrivateKey.pem"
IMAGE_INSTALL_append = " kernel-image-iasimage"

# workaround for broken recipes
SRC_URI_remove_pn-tpm2-tss = "file://0001-build-update-for-ax_code_coverage.m4-version-2019.01.patch"

## Enable Smack support ##
OVERRIDES .= ":smack"
DISTRO_FEATURES_append = " smack"

# Remove initscripts from the image altogether.
VIRTUAL-RUNTIME_initscripts = ""

# Smack utilities is useful.
CORE_IMAGE_EXTRA_INSTALL += " systemd-analyze coreutils smack-userspace"

# Exclude conflicting smack recipe
BBMASK = "meta-security/recipes-mac/smack"

## End of Smack support ##

# This file is for internal use, but should not affect external builds
include ${TOPDIR}/conf/internal/internal.inc

########## clang/llvm size problems
BAD_RECOMMENDATIONS_append = " clang-staticdev"

# libc++ conflicts with libunwind, installs library without headers
#BAD_RECOMMENDATIONS_append = " libc++-libunwind-staticdev"
PREFERRED_PROVIDER_libunwind = "llvm-libunwind"
PREFERRED_PROVIDER_libunwind-dev = "llvm-libunwind-dev"
PREFERRED_PROVIDER_libunwind-staticdev = "llvm-libunwind-staticdev"
